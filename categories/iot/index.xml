<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>IoT - Category - All about IoT</title><link>https://blog.humminglab.io/categories/iot/</link><description>IoT - Category - All about IoT</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>info@humminglab.io (HummingLab)</managingEditor><webMaster>info@humminglab.io (HummingLab)</webMaster><lastBuildDate>Tue, 17 Apr 2018 05:00:00 +0900</lastBuildDate><atom:link href="https://blog.humminglab.io/categories/iot/" rel="self" type="application/rss+xml"/><item><title>Embedded IoT 플랫폼에서 Wi-Fi 지원</title><link>https://blog.humminglab.io/posts/wifi-for-iot-product/</link><pubDate>Tue, 17 Apr 2018 05:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/wifi-for-iot-product/</guid><description><![CDATA[<p>Embedded 형태의 IoT의 센서 노드를 개발하기 위한 플랫폼(HW + SW SDK)은 다양해져서 잠깐만 인터넷 검색을 해보아도 여러 솔루션을 찾아 볼 수 있다. 특히 센서 노드의 특성 상 이들 SDK는 IEEE 802.15.4(Zigbee, Thread), IEEE 802.15.1(Bluetooth, BLE), IEEE 802.11(Wi-Fi)와 같은 wireless internet connectivity가 주요 기능으로 들어간다.</p>
<p>이 문서에서는 제품에 Wi-Fi 기능을 넣기 위하여 솔루션 선정 시 고려할 사항들을 정리한다.</p>
<h2 id="constrained-devices" class="headerLink">
    <a href="#constrained-devices" class="header-mark"></a>Constrained Devices</h2><p>IoT 센서 기기와 같은 경우는 배터리로 구동하거나, 낮은 사양 등 일반 PC 나 android 기기에 비하여 저사양 기기라고 할 수 있다. 보통 이를 constrained device 라고 한다(자세한 정의는 <a href="https://tools.ietf.org/html/rfc7228" target="_blank" rel="noopener noreferrer">RFC 7228 Terminology for Constrained-Node Networks</a> 참고). 여기에서는 이를 &lsquo;저사양 기기&rsquo;라고 표기한다. 이들 저사양 기기는 일반 PC, 네트워크 환경에 비교하여 일반적으로 다음과 같은 사항 중 하나 이상에 해당될 수 있다.</p>]]></description></item><item><title>CoAP Protocol</title><link>https://blog.humminglab.io/posts/coap-protocol/</link><pubDate>Wed, 14 Dec 2016 20:26:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/coap-protocol/</guid><description><![CDATA[<p><a href="http://www.slideshare.net/IanSkerrett/iot-developer-survey-2015/18" target="_blank" rel="noopener noreferrer">2015년 Eclipse IOT survey 결과</a>를 보면 가장 많이 사용하는 메시징 프로토콜은 HTTP, <a href="https://blog.humminglab.io/posts/mqtt-protocol/" rel="">MQTT</a>, CoAP 이다.</p>
<p>HTTP가 주요 프로토콜인 것은 두말할 필요도 없고, MQTT도 IBM에서 1999년에 개발하여 2010년에 무료로 오픈하여 나이로는 15년 이상된 것으로 <a href="https://en.wikipedia.org/wiki/Facebook_Messenger" target="_blank" rel="noopener noreferrer">Facebook Messenger</a> 에서도 사용하는 등 다양한 곳에서 사용 중 이다.
CoAP의 경우 <a href="https://datatracker.ietf.org/doc/draft-ietf-core-coap/history/" target="_blank" rel="noopener noreferrer">2010년에 첫 draft</a>가 나온 것으로 다른 프로토콜에 비하면 신생 프로토콜이라고 볼 수 있으나 점차로 사용하는 곳이 많아지는 것으로 보인다. 일 예로 작은 메모리를 가진 IOT open OS platform 인 <a href="https://www.mbed.com/en/platform/mbed-client/" target="_blank" rel="noopener noreferrer">mbed</a>, <a href="https://www.zephyrproject.org/doc/subsystems/networking/networking.html" target="_blank" rel="noopener noreferrer">zephyr</a> 에서도 CoAP을 주 통신 프로토콜로 지원하고 있고, <a href="http://www.cypress.com/internet-things-iot" target="_blank" rel="noopener noreferrer">WICED</a> 에서도 CoAP 제공하고 있다.</p>]]></description></item><item><title>MQTT Protocol</title><link>https://blog.humminglab.io/posts/mqtt-protocol/</link><pubDate>Fri, 14 Oct 2016 09:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/mqtt-protocol/</guid><description><![CDATA[<p><a href="http://mqtt.org/" target="_blank" rel="noopener noreferrer">MQTT</a>(Message Queue Telemetry Transport)는 IOT 기기간의 통신을 위한 프로토콜이다.
MQTT 이외에도 IOT용으로 <a href="http://coap.technology/" target="_blank" rel="noopener noreferrer">CoAP</a>(Constrained Application Protocol), <a href="https://www.amqp.org/" target="_blank" rel="noopener noreferrer">AMQP</a>(Advanced Message Queuing Protocol), <a href="https://xmpp.org/" target="_blank" rel="noopener noreferrer">XMPP</a>(eXtensible Messaging and Presence Protocol), <a href="http://portals.omg.org/dds/" target="_blank" rel="noopener noreferrer">DDS</a>(Data Distribution Service), <a href="https://stomp.github.io/" target="_blank" rel="noopener noreferrer">Stomp</a>(Simple Text Orientated Messaging Protocol) 등의 다양한 프로토콜이 있고, 각각의 프로토콜은 활용 용도에 따라서 장단점을 가지고 있다.</p>
<p>여기에서는 MQTT의 특징에 대해서 정리하기로 한다.</p>
<h2 id="mqtt의-특징" class="headerLink">
    <a href="#mqtt%ec%9d%98-%ed%8a%b9%ec%a7%95" class="header-mark"></a>MQTT의 특징</h2><h3 id="tcp-기반-프로토콜" class="headerLink">
    <a href="#tcp-%ea%b8%b0%eb%b0%98-%ed%94%84%eb%a1%9c%ed%86%a0%ec%bd%9c" class="header-mark"></a>TCP 기반 프로토콜</h3><p>UDP가 아닌 TCP 기반이라 작은 IOT 기기에서는 사용이 어려울 수 있다.
MQTT 프로토콜에서 사용자 인증을 제공한다. 하지만 이를 위한 username, password 필드는 cleartext로 전달되므로 이들 정보와 송수신 데이타를 보호하기 위하여는 별도로 암호화를 하거나 SSL/TLS를  이용하여 암호화 채널을 이용하여야 한다. 결과적으로 public 망에서 운영되는 IOT 기기는 MQTT, TCP, TLS를 지원할 수 있는 OS와 메모리 사양이 되어야 한다.</p>]]></description></item></channel></rss>