<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Python - Category - All about IoT</title><link>https://blog.humminglab.io/categories/python/</link><description>Python - Category - All about IoT</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>info@humminglab.io (HummingLab)</managingEditor><webMaster>info@humminglab.io (HummingLab)</webMaster><lastBuildDate>Fri, 30 Mar 2018 17:00:00 +0900</lastBuildDate><atom:link href="https://blog.humminglab.io/categories/python/" rel="self" type="application/rss+xml"/><item><title>Python 비동기 프로그래밍 제대로 이해하기(2/2) - Asyncio, Coroutine</title><link>https://blog.humminglab.io/posts/python-coroutine-programming-2/</link><pubDate>Fri, 30 Mar 2018 17:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/python-coroutine-programming-2/</guid><description><![CDATA[<p>이글은 <a href="https://blog.humminglab.io/posts/python-coroutine-programming-1/" rel="">Python 비동기 프로그래밍 제대로 이해하기(1/2)</a> 에 이어서 작성한 글이다.</p>
<h2 id="asyncio" class="headerLink">
    <a href="#asyncio" class="header-mark"></a>Asyncio</h2><p>Python 3.4 에서는 그동안 <a href="https://twistedmatrix.com/" target="_blank" rel="noopener noreferrer">Twisted</a>, <a href="http://www.tornadoweb.org/" target="_blank" rel="noopener noreferrer">Tornado</a>와 같이 별도의 library로 제공되던 event loop 방식의 비동기 프로그래밍이 asyncio (<a href="https://www.python.org/dev/peps/pep-3156/" target="_blank" rel="noopener noreferrer">PEP 3156 &ndash; Asynchronous IO Support Rebooted: the &ldquo;asyncio&rdquo; Module</a>) 표준 라이브러리로 새로 추가되었다.</p>
<p>각각의 event loop 구현이 비슷하지만 약간의 차이가 있어서 이들을 혼용하여 사용할 때 차이점을 이해하는데 부담이 있지만, 시간이 지나며 이들도 asyncio로 통합 지원하는 방향으로 되는 것 같다. 참고로 2018년 3월에 새로 릴리즈된 <a href="http://www.tornadoweb.org/en/stable/releases/v5.0.0.html" target="_blank" rel="noopener noreferrer">Tornado 5.0</a> 부터는 asyncio가 통합되어 단일 interface로 사용이 가능해졌다.</p>]]></description></item><item><title>Python 비동기 프로그래밍 제대로 이해하기(1/2) - Asyncio, Coroutine</title><link>https://blog.humminglab.io/posts/python-coroutine-programming-1/</link><pubDate>Mon, 26 Mar 2018 23:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/python-coroutine-programming-1/</guid><description><![CDATA[<p>Python2 와 비교하여 python3의 가장 돋보이는 killer feature 는 비동기 프로그래밍 지원이라고 할 수 있다. 이를 위하여 <a href="https://www.python.org/download/releases/3.4.0/" target="_blank" rel="noopener noreferrer">python 3.4</a>에 asyncio 모듈이 추가되었고, <a href="https://www.python.org/downloads/release/python-350/" target="_blank" rel="noopener noreferrer">python 3.5</a> 에는 native coroutine 지원을 위한 async, await 키워드가 추가되었다. 이들 기능을 이용하면 javascript나 다른 언어에서 지원하는 비동기 프로그래밍의 장점을 python 에서도 사용할 수 있다. 즉,  이벤트 방식이지만 blocking 방식의 프로그래밍 처럼 sequential 하게 코드를 작성할 수 있어, 단일 thread로 수만개의 네트워크 연결을 처리하는 서버를 오류 가능성을 최소화 하면서, 보다 편하게 개발할 수 있다.</p>]]></description></item></channel></rss>