<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Golang - Tag - All about IoT</title><link>https://blog.humminglab.io/tags/golang/</link><description>Golang - Tag - All about IoT</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>info@humminglab.io (HummingLab)</managingEditor><webMaster>info@humminglab.io (HummingLab)</webMaster><lastBuildDate>Wed, 16 Aug 2023 12:00:00 +0900</lastBuildDate><atom:link href="https://blog.humminglab.io/tags/golang/" rel="self" type="application/rss+xml"/><item><title>Yocto 에서 Go 프로젝트 관리</title><link>https://blog.humminglab.io/posts/yocto-golang-recipe/</link><pubDate>Wed, 16 Aug 2023 12:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/yocto-golang-recipe/</guid><description><![CDATA[<p>Yocto recipe를 작성하다 보면 대부분의 프로젝트가 C, C++ 로 작성된 것들이라 이들은 참조할 것들이 많다.
하지만 Go, Rust, NodeJS 로 작성된 프로젝트는 Yocto에 추가하려다 보면 참고할 자료가 많지는 않은 편이다.
이 글에서는 Go 언어로 작성된 프로젝트를 추가하는 방법을 정리한다.</p>
<h2 id="go-module" class="headerLink">
    <a href="#go-module" class="header-mark"></a>Go Module</h2><p>우선 간단하게 Go 의 모듈 정책에 대해서 정리 해본다.</p>
<p>2009년에 Go 가 처음 나왔을때는 모듈관리는 단순했다.
Go 프로젝트에서 참고하는 모듈은 <code>go get</code> 으로 다운로드하면 $GOPATH/src 디렉토리에 해당 모듈이 설치된다.
하나의 예를 들면 다음과 같이 src 디렉토리에 모듈 경로를 포함해서 설치가 된다.</p>]]></description></item></channel></rss>