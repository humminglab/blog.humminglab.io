<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>PlatformIO - Tag - All about IoT</title><link>https://blog.humminglab.io/tags/platformio/</link><description>PlatformIO - Tag - All about IoT</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>info@humminglab.io (HummingLab)</managingEditor><webMaster>info@humminglab.io (HummingLab)</webMaster><lastBuildDate>Sat, 25 Jun 2022 09:00:00 +0900</lastBuildDate><atom:link href="https://blog.humminglab.io/tags/platformio/" rel="self" type="application/rss+xml"/><item><title>PlatformIO (2) - STM32Cube Platform 개발</title><link>https://blog.humminglab.io/posts/platformio-2-stm32-cube/</link><pubDate>Sat, 25 Jun 2022 09:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/platformio-2-stm32-cube/</guid><description><![CDATA[<p>이전 글에 이어 PlatformIO를 이용하여 STM32Cube SDK 로 개발환경을 구성하는 것을 정리해 본다.</p>
<ul>
<li><a href="https://blog.humminglab.io/posts/platformio-1/" rel="">PlatformIO (1) - 개요 및 특징</a></li>
<li><strong>PlatformIO (2) - STM32Cube Platform 개발</strong></li>
<li>PlatformIO (3) - STM32Cube FreeRTOS 적용</li>
<li>PlatformIO (4) - PlatformIO 디버깅</li>
<li>PlatformIO (5) - PlatformIO Unit Test</li>
</ul>
<h2 id="platformio로-stm32-platform-설치하기" class="headerLink">
    <a href="#platformio%eb%a1%9c-stm32-platform-%ec%84%a4%ec%b9%98%ed%95%98%ea%b8%b0" class="header-mark"></a>PlatformIO로 STM32 platform 설치하기</h2><p>VSCode에서 아래와 같이 PlatformIO Home을 연다.</p>
<a class="lightgallery" href="/posts/platformio-2-stm32-cube/pio-01.png" title="" data-thumbnail="/posts/platformio-2-stm32-cube/pio-01.png"><img  loading="lazy" src=https://blog.humminglab.io/posts/platformio-2-stm32-cube/pio-01.png    height="auto" width="600px"></a>
<p>New Project 선택하여 다음과 같이 설정</p>
<ul>
<li>Name은 stm32test 와 같이 적절히 설정</li>
<li>Board는 &ldquo;ST Nucleo F103RB&rdquo; 선택</li>
<li>Framework는 &ldquo;STM32Cube&rdquo; 선택</li>
<li>Finish 로 생성</li>
</ul>
<a class="lightgallery" href="/posts/platformio-2-stm32-cube/pio-02.png" title="" data-thumbnail="/posts/platformio-2-stm32-cube/pio-02.png"><img  loading="lazy" src=https://blog.humminglab.io/posts/platformio-2-stm32-cube/pio-02.png    height="auto" width="400px"></a>
<p>우선 동작이 되는지만 확인키 위하여 다음과 같이 src/main.c 로 main() 함수를 만든다.</p>]]></description></item><item><title>PlatformIO (1) - 개요 및 특징</title><link>https://blog.humminglab.io/posts/platformio-1/</link><pubDate>Fri, 24 Jun 2022 09:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/platformio-1/</guid><description>&lt;p>Cortex-M series 급을 이용한 임베디드 시스템 개발을 하다 보면, 지속적으로 사용할 수 있는 통합 개발 환경이 마땅치 않다는 문제가 있다.
Windows 나 Linux 라면 한번 익혀 두면 수년은 두고 두고 쓸수 있는 개발 환경들이 있지만 임베디드 개발 환경의 경우 MCU 가 바뀔 때마다 개발환경을 바꾸어야만 하는 경우가 생긴다.
개발 환경의 범위를 최소 셋인 컴파일, 다운로드 만이 아닌 디버깅, unit test 까지로 고려한다면 범위가 더 좁아 질 수 밖에 없다.&lt;/p>
&lt;p>지금까지는 대부분의 프로젝트는 임베디드 Linux 와 마찬가지로 gcc, binutils, gdb, OpenOCD 을 이용하여 개발하였고, 디버깅을 지원하는 통합 개발 환경으로는 emacs를 사용하였다.&lt;/p></description></item></channel></rss>