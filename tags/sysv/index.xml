<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>SysV - Tag - All about IoT</title><link>https://blog.humminglab.io/tags/sysv/</link><description>SysV - Tag - All about IoT</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>info@humminglab.io (HummingLab)</managingEditor><webMaster>info@humminglab.io (HummingLab)</webMaster><lastBuildDate>Tue, 07 Jun 2022 09:00:00 +0900</lastBuildDate><atom:link href="https://blog.humminglab.io/tags/sysv/" rel="self" type="application/rss+xml"/><item><title>Systemd의 특징과 Yocto에 적용하기</title><link>https://blog.humminglab.io/posts/yocto-systemd/</link><pubDate>Tue, 07 Jun 2022 09:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/yocto-systemd/</guid><description><![CDATA[<p>Yocto project에서 기본 설정으로 빌드하면 SysV Init를 사용한다.
개발하는 제품이 이더넷 네트워크로 연결되고, 부팅 이후에는 네트워크 환경이 변하지 않는다면 SysV Init를 이용하는 것이 구조도 단순해서 더 좋을 수 있다.</p>
<p>하지만 다음과 같은 사항을 고려하고 있다면 systemd를 적용하는 것을 검토해 볼 수 있다.</p>
<ul>
<li>Daemon 이 죽는 경우를 검출하여 재시작 관리가 필요한 경우</li>
<li>Wi-Fi 와 같이 동적으로 변경될 수 있는 네트워크 관리가 필요한 경우</li>
<li>불규칙하게 네트워크가 끊길 수 있는 조건에서 시간 동기화가 필요한 경우</li>
<li>프로그램에 CPU 또는 메모리 자원을 제한하기 위하여 <a href="https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt" target="_blank" rel="noopener noreferrer">cgroups</a>를 사용하려는 경우</li>
<li>효과적인 로그 관리를 위하여 journald를 사용하고 싶은 경우</li>
<li>부팅 직후 초기 프로세스의 실행 시간을 줄여 보려는 경우</li>
</ul>
<p>물론 위의 기능을 사용하기 위해서 systemd만 가능한 것은 아니지만, systemd를 사용하는 경우 별도의 프로그램 없이 위 기능을 쉽게 적용할 수 있다.</p>]]></description></item></channel></rss>