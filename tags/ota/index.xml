<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>OTA - Tag - All about IoT</title><link>https://blog.humminglab.io/tags/ota/</link><description>OTA - Tag - All about IoT</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>info@humminglab.io (HummingLab)</managingEditor><webMaster>info@humminglab.io (HummingLab)</webMaster><lastBuildDate>Wed, 16 Feb 2022 22:00:00 +0900</lastBuildDate><atom:link href="https://blog.humminglab.io/tags/ota/" rel="self" type="application/rss+xml"/><item><title>Yocto에 OSTree upgrade 적용(3) - 업그레이드/롤백 및 OSTree 리뷰</title><link>https://blog.humminglab.io/posts/yocto-ostree-meta-updater-3/</link><pubDate>Wed, 16 Feb 2022 22:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/yocto-ostree-meta-updater-3/</guid><description><![CDATA[<p>이전글 <a href="https://blog.humminglab.io/posts/yocto-ostree-meta-updater-1/" rel="">Yocto에 OSTree upgrade 적용(1)</a> 에서 Yocto를 이용한 빌드 과정과,
<a href="https://blog.humminglab.io/posts/yocto-ostree-meta-updater-2/" rel="">Yocto에 OSTree upgrade 적용(2)</a> 에서 OSTree를 적용한 이미지의 부팅 과정에 대해서 설명하였다.</p>
<p>이번 글에서는 OSTree가 적용된 이미지를 실제로 업그레이드 하는 방법, 롤백 절차, 프로그램에서 이를 관리하는 방법에 대해서 설명한다.</p>
<p>이해를 돕고자 OSTree의 업그레이드 절차를 git과 비교하여 설명한다.
OSTree는 ostree CLI 명령을 이용하여 업그레이드 과정을 수행할 수 있고, libostree library 를 이용하여 프로그램으로 구현할 수 도 있다. 이 글에서는 CLI를 이용하는 업그레이드 방법을 설명한다.</p>]]></description></item><item><title>Yocto에 OSTree upgrade 적용(2) - 부팅 절차</title><link>https://blog.humminglab.io/posts/yocto-ostree-meta-updater-2/</link><pubDate>Mon, 14 Feb 2022 09:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/yocto-ostree-meta-updater-2/</guid><description><![CDATA[<p>이전글 <a href="https://blog.humminglab.io/posts/yocto-ostree-meta-updater-1/" rel="">Yocto에 OSTree upgrade 적용(1) - 이미지 생성</a> 에서는 Yocto 빌드 과정을 통한 target 에 write 할 이미지를 만드는 과정까지 설명 하였다.</p>
<p>이번글에서는 부팅 이미지를 이용하여 부팅 절차를 설명한다.</p>
<h2 id="디스크-이미지-파일" class="headerLink">
    <a href="#%eb%94%94%ec%8a%a4%ed%81%ac-%ec%9d%b4%eb%af%b8%ec%a7%80-%ed%8c%8c%ec%9d%bc" class="header-mark"></a>디스크 이미지 파일</h2><p>최종적으로 디스크에 쓰는 이미지를 Yocto 의 wic 툴을 이용하여 확인해 보면 다음과 같이 두개의 partition 으로 구성된다.</p>
<ul>
<li>Partiton 1(fat16): DOS FAT16 의 부팅 디스크로 u-boot 과 부팅에 필요한 설정 파일이 있다.
<ul>
<li>파일 중 boot.scr 파일이 있는데, 이 파일로 u-boot 의 script를 대체하여 OSTree 이미지가 로드되도록 한다.</li>
</ul>
</li>
<li>Partition 2(ext4): OSTree용 이미지</li>
</ul>
<div class="code-block highlight is-open show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">shell</p>]]></description></item><item><title>Yocto에 OSTree upgrade 적용(1) - 이미지 생성</title><link>https://blog.humminglab.io/posts/yocto-ostree-meta-updater-1/</link><pubDate>Wed, 26 Jan 2022 21:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/yocto-ostree-meta-updater-1/</guid><description><![CDATA[<p>Linux PC 의 경우 각 배포본 마다 yum, rpm, dpkg 등의 package manager를 제공하여, 이를 이용하여 패키지를 최신 버전으로 유지 관리할 수 있다.
임베디드의 경우도 <a href="https://www.raspberrypi.com/software/" target="_blank" rel="noopener noreferrer">Raspberry Pi OS</a>, <a href="https://www.armbian.com/" target="_blank" rel="noopener noreferrer">armbian</a> 은 PC 에서 사용하는 package manager 방식을 제공하고, Yocto 도 rpm 등을 이용하여 패키지 관리가 가능하다.</p>
<p>이들 패키지 매니저는 패키지 데이타베이스를 업데이트 하고, 패키지 업그레이드 시 의존성 있는 추가 패키지도 다운로드 받아서 설치/삭제하고, 설치 전/후처리를 위한 script를 자동으로 실행시켜서 최종 상태를 만들어 준다. 하지만 임베디드 제품의 경우 이같은 방식은 다음과 같은 유지 관리 문제를 가져 올 수 있다.</p>]]></description></item></channel></rss>