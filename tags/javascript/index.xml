<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Javascript - Tag - All about IoT</title><link>https://blog.humminglab.io/tags/javascript/</link><description>Javascript - Tag - All about IoT</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>info@humminglab.io (HummingLab)</managingEditor><webMaster>info@humminglab.io (HummingLab)</webMaster><lastBuildDate>Mon, 21 Aug 2023 16:00:00 +0900</lastBuildDate><atom:link href="https://blog.humminglab.io/tags/javascript/" rel="self" type="application/rss+xml"/><item><title>Yocto 에서 NPM 기반의 Javascript 패키지 관리</title><link>https://blog.humminglab.io/posts/yocto-npm-js-recipe/</link><pubDate>Mon, 21 Aug 2023 16:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/yocto-npm-js-recipe/</guid><description><![CDATA[<p><a href="https://blog.humminglab.io/posts/yocto-golang-recipe/" rel="">Yocto에서 Go 프로젝트 관리</a>에 추가하여 JavaScript 기반의 프로그램을 Yocto의 패키지로 관리하는 방법을 정리해 본다.</p>
<p>관련 사항은 Yocto Wiki 의 NPM 기반 패키지 관리 방법에 간략하게 설명되어 있다.</p>
<ul>
<li><a href="https://wiki.yoctoproject.org/wiki/TipsAndTricks/NPM" target="_blank" rel="noopener noreferrer">TipsAndTricks/NPM - Yocto Project</a></li>
</ul>
<p>Javascript 기반의 프로젝트도 Go 언어와 마찬가지로 패키지 관련한 문제가 있지만 이 부분은 어느정도 툴을 이용하여 해결된 상태이다.</p>
<p>임베디드 환경에서 Javascript NPM 를 사용하는 경우를 크게 보면 다음 두 경우가 있을 수 있다.</p>
<ul>
<li>Node.js 기반의 프로젝트</li>
<li>Webpack/React와 같은 static page 생성</li>
</ul>
<p>Node.js와 같은 프로젝트는 빌드 시 <code>nodejs-native</code> 도 필요하지만 target에서 동작하는 <code>nodejs</code>도 필요하다.
하지만 webpack과 같은 경우에는 <code>nodejs-native</code>만 있어서 configure, compile task에서 이를 이용하여 페이지를 생성하면 되고, 별도로 target에 <code>nodejs</code>를 설치할 필요가 없다.</p>]]></description></item><item><title>Nearley 로 설정용 파서 만들기</title><link>https://blog.humminglab.io/posts/nearley-builder-and-loader/</link><pubDate>Tue, 04 Jan 2022 19:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/nearley-builder-and-loader/</guid><description><![CDATA[<p>이 문서에서는 <a href="https://nearley.js.org/" target="_blank" rel="noopener noreferrer">Nearley</a> parsing toolkit 을 이용하여 IoT 기기에서 사용할 설정 정보의 binary pack 및 loader 를 생성하는 방법을 설명한다.</p>
<p>예를 들어 아래와 같은 간단한 문법을 정의하고, 이를 Nearley 로 parser를 만들어 구분 분석을 하여, 디바이스에 로드할 수 있는 바이너리 데이터로 변환을 한다.
그리고, 변환된 바이너리 파일을 장치에서 로드하여 설정 정보를 얻는다.</p>
<div class="code-block highlight is-open show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">text</p>]]></description></item></channel></rss>